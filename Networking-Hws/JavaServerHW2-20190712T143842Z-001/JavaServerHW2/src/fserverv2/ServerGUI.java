package fserverv2;


import java.awt.List;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.value.ChangeListener;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author ShutDowner007
 */
public class ServerGUI extends javax.swing.JFrame {

    /**
     * Creates new form ServerGUI
     */
    
    
      // Vector to store active clients 
    static ClientHandler []ar ;
      InetAddress ServerIP;
       File selectedFile;
    // counter for clients 
    static int i = 0;
    public ServerGUI() throws UnknownHostException {
        initComponents();
        ar = new ClientHandler[100]; 
        ServerIP = InetAddress.getLocalHost();
        jTextField1.setText(ServerIP.toString());
        jTextField1.setEditable(false);
        jTextArea3.setEditable(false);
        jTextArea1.setEditable(false);
        jTextArea2.setEditable(false);
       // jTextField1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField2.setText("5555");

        jLabel1.setText("Ip");

        jLabel2.setText("Port");

        jButton1.setText("Start Listening");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField3.setText("Hello Client, nice day !");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Send a Message");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Online Users");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jLabel4.setText("status");

        jLabel5.setText("Message");

        jLabel6.setText("Conversation");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        jTextField4.setText("client0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addContainerGap(216, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(jButton2)
                                    .addGap(49, 49, 49))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(49, 49, 49)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(107, 107, 107))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        try {       
            ServerStartListening ServerSL = new ServerStartListening(Integer.parseInt(this.jTextField2.getText()));
            Thread ts = new Thread(ServerSL);
            ts.start();
        } catch (IOException ex) {
            Logger.getLogger(ServerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        for (ClientHandler mc : ar) {
                // if the recipient is found, write on its
                // output stream
                 try {
               if (mc.getName().equals(jTextField4.getText())  )
                {
                   
                //   mc.dos.writeUTF("sendmssgfromserver");
                  
                        mc.dos.writeUTF("sendmssgfromserver"+jTextField3.getText());
                       jTextArea1.append("Server : "+jTextField3.getText()+"\n");
                   break;
                }
                } catch (Exception ex) {
                       JOptionPane.showMessageDialog(this, "Client name is invalid !");
                       break;
                    }
            } 
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ServerGUI().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ServerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    
class ServerStartListening implements Runnable  
{ 

  
    // server is listening on port 1234
        ServerSocket ss; 
          
        Socket s; 
          
        // running infinite loop for getting 
        // client request 

    ServerStartListening(int port) throws IOException {
        this.ss = new ServerSocket(port);
    }

    
        
    
    @Override
    public void run() {
       while(true){
        try {
            // Accept the incoming request
            s = ss.accept();
        } catch (IOException ex) {
            Logger.getLogger(ServerStartListening.class.getName()).log(Level.SEVERE, null, ex);
        }
  
            jTextArea2.append("New client request received : " + s+"\n"); 
              
            // obtain input and output streams 
            DataInputStream dis = null; 
        try {
            dis = new DataInputStream(s.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(ServerStartListening.class.getName()).log(Level.SEVERE, null, ex);
        }
            DataOutputStream dos = null; 
        try {
            dos = new DataOutputStream(s.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(ServerStartListening.class.getName()).log(Level.SEVERE, null, ex);
        }
              
            jTextArea2.append("Creating a new handler for this client..."+"\n"); 
  
            // Create a new handler object for handling this request. 
            ClientHandler mtch = new ClientHandler(s,"client" + i,s.getInetAddress(),s.getPort(), dis, dos); 
  
            // Create a new Thread with this object. 
            Thread tc = new Thread(mtch); 
              
            jTextArea2.append("Adding this client to active client list"+"\n"); 
  
            // add this client to active clients list 
            ar[i]=mtch;
             i++;
           
           
           for (ClientHandler mc : ar) {
                // if the recipient is found, write on its
                // output stream
                 try {
              
                 if (mc.getName().equals("client"+(i-1))  )
                {    
                     Thread.sleep(500);
                     mc.dos.writeUTF("filenamesearching-john-cho.jpg");
                      Thread.sleep(500);
                      mc.dos.writeUTF("filenameHW1p2pchat.rar");
                       Thread.sleep(500);
                      mc.dos.writeUTF("filenameNassif-Zaiton-Panet.co.il_Nassif-Zeytoun-Majbour.mp3");
                       Thread.sleep(500);
                      mc.dos.writeUTF("filenameNTD.txt");
                       Thread.sleep(500);
                      mc.dos.writeUTF("filenameUmmon - Hiyonat (Official music) - YouTube.MKV");
                       Thread.sleep(500);
                  
                   break;
                }
                
                } catch (Exception ex) {
                       jTextArea2.append("Client name is invalid !");
                       break;
                    }
            } 
          
            jTextArea3.setText("");
            for(int j =0; j<i;j++){
                if(ar[j].connected){
               jTextArea3.append(ar[j].name+", "+ar[j].clientPort+", "+ar[j].clientIP+" \n");
                }
           }
            // start the thread. 
            tc.start(); 
            
            // increment i for new client. 
            // i is used for naming only, and can be replaced 
            // by any naming scheme 
             
       }
    }
    
 
}
   // ClientHandler class 
class ClientHandler implements Runnable  
{ 
   
   private final  String name; 
    final DataInputStream dis; 
    final DataOutputStream dos; 
    int clientPort;
    InetAddress clientIP;
    Socket s;
    
    boolean connected; 
     InputStream in ;
        OutputStream out;
   String message;
  
    // constructor 
    public ClientHandler(Socket s, String name,InetAddress clientIP,int clientPort, 
                            DataInputStream dis, DataOutputStream dos) { 
        this.dis = dis; 
        this.dos = dos; 
        this.name = name;
        this.clientPort = clientPort;
        this.clientIP = clientIP;
        this.s = s; 
     message="";
        this.connected=true; 
    } 
  public String getName(){
      return this.name;
  }
    @Override
    public void run() { 
        
         
        selectedFile = new File("HW1p2pchat.rar"); 
       
         try 
            {
        in = new FileInputStream(selectedFile);
       out = this.s.getOutputStream();
            
            } catch(Exception e){
                
            }

            try 
            {
                while (true) 
                {
                    long start = System.currentTimeMillis();
             try {
                 Thread.sleep(100);
             } catch (InterruptedException ex) {
                 Logger.getLogger(ServerGUI.class.getName()).log(Level.SEVERE, null, ex);
             }
               
                   if(dis.available()>0){
                      int size = dis.available();
                      byte[] bytes = new byte[size];
        
                       dis.read(bytes);
                     
                     message = new String (bytes);
                      
                      if(message.equalsIgnoreCase("exit(1)")){
                          connected=false;
                         /* this.s.close();
                        this.dos.close();
                          this.dis.close();
                         this.in.close();
                         this.out.close();*/
                          
                        
               jTextArea3.setText("");
            for(int j =0; j<i;j++){
                if(ar[j].connected){
               jTextArea3.append(ar[j].name+", "+ar[j].clientPort+", "+ar[j].clientIP+" \n");
                }
           }
                      }else if(message.contains("sendfile")){   
                          
                          
                       message = message.substring(8);
                          
                           jTextArea2.append(message);
                                   try {
               
              
                     
        // Get the size of the file
        selectedFile = new File(message); 
        long length = selectedFile.length();
        byte[] bytesOfFile;
                                       bytesOfFile = new byte[1024];
        in = new FileInputStream(selectedFile);
       out = this.s.getOutputStream();
   // if the recipient is found, write on its
                // output stream
             
                   
                    
        int count;
        while ((count = in.read(bytesOfFile)) > 0) {
               Thread.sleep(500);
              // this.dos.writeUTF("sendfilefromserver");
            out.write(bytesOfFile, 0, count);
             Thread.sleep(500);
        
        }
        jTextArea2.append("The file was sent correctly");
                          
               
               
                } catch (Exception ex) {
                     
                        jTextArea2.append("Lost a connection. \n");
                         ex.printStackTrace();
                    }
                          
                      }else{
                
                    jTextArea1.append("Received from "+ this.name+": " + message + "\n");
                   
                    jTextArea2.append("the msg recvd correctly! \n");
                      }
               }
                 
                } 
             } 
             catch (Exception ex) 
             {
                jTextArea2.append("Lost a connection. \n");
                ex.printStackTrace();
                  
               
             } 
        
        
       
        
      
    } 
}
  

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}